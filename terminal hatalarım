import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

def save_spectrogram(audio_data, samplerate, file_path):
    # Compute the fast Fourier transform (FFT) of the audio signal
    n = len(audio_data)  # Length of the signal
    yf = fft(audio_data)
    xf = fftfreq(n, 1 / samplerate)
    
    # Create a figure to hold the plot
    plt.figure()
    plt.plot(xf, np.abs(yf))
    plt.title('Audio Spectrogram')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Amplitude')
    plt.grid(True)
    
    # Save the figure to a file
    spectrogram_path = file_path.replace('.wav', '_spectrogram.png')
    plt.savefig(spectrogram_path)
    plt.close()  # Close the figure to free up memory
    print(f"Spectrogram saved to {spectrogram_path}")

# Modify the record_sound function to also save the spectrogram
def record_sound():
    file_name = "Recorded Sound {}.wav".format(datetime.now().strftime('%Y-%m-%d %H-%M-%S'))
    file_path = os.path.join(folder_name, file_name)

    print(f"Recording for {duration} seconds...")
    try:
        # Record audio
        audio = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=channels, dtype='int16')
        sd.wait()  # Wait until recording is finished
        print("Recording finished. Saving file...")

        # Save as a WAV file
        with wave.open(file_path, 'w') as wf:
            wf.setnchannels(channels)
            wf.setsampwidth(2)  # 2 bytes (16 bits)
            wf.setframerate(samplerate)
            wf.writeframes(audio.tobytes())
        
        print(f"Audio saved to {file_path}")

        # Convert the audio array to a single channel by averaging if stereo
        if channels > 1:
            audio_mono = np.mean(audio, axis=1)
        else:
            audio_mono = audio
        
        # Save the spectrogram
        save_spectrogram(audio_mono, samplerate, file_path)

    except Exception as e:
        print(f"An error occurred: {e}")
